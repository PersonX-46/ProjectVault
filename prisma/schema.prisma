// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  admin_id     String @id // Manually assigned ID
  name         String
  passwordHash String
}

model student {
  student_id     String           @id // Manually assigned ID
  name           String
  passwordHash   String
  email          String
  phone          String
  address        String
  prog_id        String
  prog_name      String
  ProjectLike    ProjectLike[]
  ProjectComment ProjectComment[]
  BorrowRequest  BorrowRequest[]

  project project[]
}

model project {
  id             String           @id @default(uuid()) // Manually assigned ID
  title          String
  description    String
  student_id     String
  student        student          @relation(fields: [student_id], references: [student_id])
  prog_id        String           // Add this field to reference program
  category       String
  admin_id       String
  report_url     String?
  grade          String
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  ProjectLike    ProjectLike[]
  ProjectComment ProjectComment[]
  BorrowRequest  BorrowRequest[]
}

model ProjectLike {
  id         String   @id @default(uuid())
  student_id String
  project_id String
  project    project  @relation(fields: [project_id], references: [id])
  student    student  @relation(fields: [student_id], references: [student_id])
  createdAt  DateTime @default(now())
}

model ProjectComment {
  id         String   @id @default(uuid())
  student_id String
  project_id String
  content    String
  project    project  @relation(fields: [project_id], references: [id])
  student    student  @relation(fields: [student_id], references: [student_id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model BorrowRequest {
  id            String    @id @default(uuid())
  student_id    String
  project_id    String
  status        String    @default("pending") // pending, approved, rejected
  request_date  DateTime  @default(now())
  response_date DateTime?
  project       project   @relation(fields: [project_id], references: [id])
  student       student   @relation(fields: [student_id], references: [student_id])
}

model requests {
  id         String   @id // Manually assigned ID
  student_id String
  project_id String
  status     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}